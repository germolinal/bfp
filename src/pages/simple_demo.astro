---
import MainLayout from "../layouts/MainLayout.astro";
import colors from "../colors";
const primarySolidLight = colors["primary_solid_light"];
const onPrimarySolidLight = colors["on_primary_solid_light"];
---

<MainLayout
    title="SIMPLE demo"
    description="A demonstration of client-based simulation"
>
    <style
        define:vars={{
            primarySolidLight,
            onPrimarySolidLight,
        }}
    >
        body > main {
            display: flex;
            overflow: hidden;
            width: 100vw;
        }
        #toolbar {
            box-sizing: border-box;
            padding: 0.5em;
            width: 300px;
            min-width: 300px;
            height: 100%;
            margin: 0;
            height: 100vh;
            overflow-y: scroll;
        }

        #toolbar h2 {
            font-size: 1em;
            font-weight: bold;
        }
        #renderer {
            height: 100vh;
            flex-grow: 1;
        }
        #initialize-banner {
            padding: 0;
            position: absolute;
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 100%;
            width: 270px;
            background-color: #f5f5f5;
            text-align: center;
            z-index: 99;
        }

        #initialize-banner button {
            color: var(--onPrimarySolidLight);
            background-color: var(--primarySolidLight);
            border: none;
            width: fit-content;
            padding: 0.4em 1.2em;
            border-radius: 0.6em;
            margin: 0.2em auto;
            font-size: 1.2em;
            font-weight: light;
            cursor: pointer;
        }
    </style>
    <style is:inline>
        #temps, #heaters {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        #temps li, #heaters li {
            background-color: white;
            list-style: none;
            width: 75px;
            height: 60px;
            display: flex;
            flex-direction: column-reverse;
            padding: 0.2em;
            border: 1px solid black;
            border-radius: 5px;
            text-align: center;
            justify-content: center;
            margin: 0.2em;
        }
        #heaters li {
            width: 100%;
            cursor: pointer;
        }
        #heaters li.on {
            color: var(--onPrimarySolidLight);
            background-color: var(--primarySolidLight);
        }
        #temps li > span:first-child, #heaters li > span:first-child {
            font-size: 0.8em;
            opacity: 0.7;
            margin-top: 0.3em;
        }
    </style>
    <main>
        <div id="renderer">
            <simple-renderer
                model={JSON.stringify({
                    surfaces: [],
                    fenestrations: [],
                    luminaires: [],
                    hvacs: [],
                    spaces: [],
                    objects: [],
                })}
                groundColor={"#bab6ab"}
                indoorWallColor={"#ecf7ff"}
                outdoorWallColor={"#cecece"}
                ceilingColor={"#d2d2d2"}
                floorColor={"#EFDECD"}
                doorColor={"#ccb999"}
                accentColor={"#00658b"}
            >
            </simple-renderer>
        </div>
        <div id="toolbar">
            <div id="initialize-banner">
                <button id="initalize-demo">Initialize this demo</button>
                <span><small>(It takes a minute)</small></span>
            </div>

            <span
                style="margin-top: 60px;display:block;width:100%;text-align:center;"
            >
                <small
                    >Use the slide below to set the exterior temperature.</small
                >
            </span>
            <input
                style="width: 100%;box-sizing:border-box;margin-top:1em;"
                id="set-temp"
                type="range"
                min="1"
                max="50"
                value="22"
                class="slider"
            />
            <h2>Temperatures</h2>
            <ul id="temps">
                <li><span>Exterior</span><span id="ext-temp"></span></li>
            </ul>
            <h2>Heaters</h2>
            <span style="text-align: center;display:block;text-align: center;"><small>Click on these to turn them on or off</small></span>
            <ul id="heaters"></ul>
        </div>
    </main>
    <script>
        import Simple3DRenderer from "../components/render/renderer";
        if (!customElements.get("simple-renderer")) {
            customElements.define("simple-renderer", Simple3DRenderer);
        }
        import ColdModel from "../cold_model";
    
        
    
        import {
            memory,
            __wbindgen_malloc,
            __wbindgen_free,
            // @ts-ignore
        } from "simple-wasm/simple_wasm_bg.wasm";
        // @ts-ignore
        import { ModelHandler } from "simple-wasm";
    
        function mallocString(str: string): { ptr: any; len: number } {
            const encoder = new TextEncoder();
            const strBuffer = encoder.encode(str);
            const len = strBuffer.length;
            const ptr = __wbindgen_malloc(len, 1);
    
            const m = new Uint8Array(memory.buffer, ptr, len);
            m.set(strBuffer);
    
            return { ptr, len };
        }
    
        function GetModelHandler(str: string): ModelHandler {
            const { ptr, len } = mallocString(str);
    
            const ret = new ModelHandler(ptr, len);
            __wbindgen_free(ptr, len, 1);
            return ret;
        }
    
        const renderer = document.getElementById("renderer")!
            .children[0] as Simple3DRenderer;        
        renderer.model = JSON.stringify(ColdModel);
    
        const setTemp = document.getElementById("set-temp")! as HTMLInputElement;
        setTemp.oninput = () => {
            let t = Math.round(parseFloat(setTemp.value));
            document.getElementById("ext-temp")!.innerText = `${t} C`;
        };
        // @ts-ignore
        setTemp.oninput();
    
        document.getElementById("initalize-demo")!.onclick = () => {
            const banner = document.getElementById("initialize-banner")!;
            const modelHandler = GetModelHandler(JSON.stringify(ColdModel));
    
            banner.innerHTML = `<style>.loader {
                    border: 16px solid transparent; /* Light grey */
                    border-top: 16px solid #0071e3; 
                    border-bottom: 16px solid #0071e3; 
                    border-radius: 50%;
                    width: 60px;
                    height: 60px;
                    animation: spin 2s linear infinite;
                    margin: 0 auto;
                }
    
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); 
                }
            }</style><div class="loader"></div>`;
            modelHandler.pre_process();
            banner.remove();
    
    
            let temps: any[] = [];
            let tempList = document.getElementById("temps")!;
            ColdModel.spaces.forEach((s, i) => {
                let index = modelHandler.get_space_temperature_index(i);
                let name = s.name;
    
                let li = document.createElement("li");
                li.innerHTML = `<span>${name}</span>`;
                let span = document.createElement("span");
                li.appendChild(span);
                tempList.appendChild(li);
    
                temps.push({
                    index,
                    span,
                });
            });
    
            let hvacList = document.getElementById("heaters")!;
            let hvacs: any[] = [];
            ColdModel.hvacs.forEach((s, i) => {
                let index = modelHandler.get_hvac_power_index(i);
                let name = s.name;
    
                let li = document.createElement("li");
                li.innerHTML = `<span>${name}</span>`;            
                let span = document.createElement("span");
                li.appendChild(span);
                li.onclick = ()=>{
                    li.classList.toggle("on");
                    if (li.classList.contains("on")){
                        // it is now on
                        setStateElement(index, 1000)
                    }else{
                        // it is now off
                        setStateElement(index, 0)
                    }
                }
    
                hvacList.appendChild(li);            
                hvacs.push({
                    index,
                    span,
                });
            });
    
            let state = modelHandler.get_state();
            let stateLen = modelHandler.state_len();
            const getStateElement = (i: number) => {
                if (i < 0 || i >= stateLen) {
                    throw new Error(
                        `Index out of bounds!... got ${i} when state's length is ${stateLen}`,
                    );
                }
                const stateData = new Float64Array(memory.buffer, state, stateLen);
                return Math.round(stateData[i] * 10) / 10;
            };
            const setStateElement = (i: number, v: number) => {
                if (i < 0 || i >= stateLen) {
                    throw new Error(
                        `Index out of bounds!... got ${i} when state's length is ${stateLen}`,
                    );
                }
                const stateData = new Float64Array(memory.buffer, state, stateLen);
                stateData[i]=v
            };
    
            const renderLoop = () => {
                modelHandler.march(parseFloat(setTemp.value));
                temps.forEach((v) => {
                    let { index, span } = v;
                    let t = getStateElement(index);
                    span.innerText = `${t} C`;
                });
                hvacs.forEach((v) => {
                    let { index, span } = v;
                    let t = getStateElement(index);
                    span.innerText = `${t} W`;
                });
    
                requestAnimationFrame(renderLoop);
            };
            renderLoop();
        };
    </script>
</MainLayout>

