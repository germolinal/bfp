---
import MainLayout from "../layouts/MainLayout.astro";
---

<MainLayout
    title="SIMPLE demo"
    description="A demonstration of client-based simulation"
>
    <style>
        body > main {
            display: flex;
            overflow: hidden;
            width: 100vw;
        }
        #toolbar {
            padding: 0.5em;
            padding-top: 150px;
            width: 300px;
            min-width: 300px;
            height: 100%;
            margin: 0;
            height: 100vh;
        }
        #renderer {
            height: 100vh;
            flex-grow: 1;
        }
    </style>
    <main>
        <div id="renderer">
            <simple-renderer
                model={JSON.stringify({
                    surfaces: [],
                    fenestrations: [],
                    luminaires: [],
                    hvacs: [],
                    spaces: [],
                    objects: [],
                })}
                groundColor={"#bab6ab"}
                indoorWallColor={"#ecf7ff"}
                outdoorWallColor={"#cecece"}
                ceilingColor={"#d2d2d2"}
                floorColor={"#EFDECD"}
                doorColor={"#ccb999"}
                accentColor={"#00658b"}
            >
            </simple-renderer>
        </div>
        <div id="toolbar">
            <input
                id="set-temp"
                type="range"
                min="1"
                max="50"
                value="22"
                class="slider"
            />
            <h2>Temperatures</h2>
            <ul id="temps">
                <li><span>Exterior</span>:<span id="ext-temp"></span></li>
            </ul>
        </div>
    </main>
    <script>
        import Simple3DRenderer from "../components/render/renderer";
        if (!customElements.get("simple-renderer")) {
            customElements.define("simple-renderer", Simple3DRenderer);
        }
    </script>
    <script>
        import ColdModel from "../cold_model";

        import Simple3DRenderer from "../components/render/renderer";

        import {
            memory,
            __wbindgen_malloc,
            __wbindgen_free,
            // @ts-ignore
        } from "simple-wasm/simple_wasm_bg.wasm";
        // @ts-ignore
        import { ModelHandler } from "simple-wasm";

        function mallocString(str: string): { ptr: any; len: number } {
            const encoder = new TextEncoder();
            const strBuffer = encoder.encode(str);
            const len = strBuffer.length;
            const ptr = __wbindgen_malloc(len, 1);

            const m = new Uint8Array(memory.buffer, ptr, len);
            m.set(strBuffer);

            return { ptr, len };
        }

        function GetModelHandler(str: string): ModelHandler {
            const { ptr, len } = mallocString(str);

            const ret = new ModelHandler(ptr, len);
            __wbindgen_free(ptr, len, 1);
            return ret;
        }

        const renderer = document.getElementById("renderer")!
            .children[0] as Simple3DRenderer;
        renderer.model = JSON.stringify(ColdModel);

        const setTemp = document.getElementById(
            "set-temp",
        )! as HTMLInputElement;
        setTemp.oninput = (e: any) => {
            let t = Math.round(e.target.value);
            document.getElementById("ext-temp")!.innerText = t;
        };

        const modelHandler = GetModelHandler(JSON.stringify(ColdModel));
        let state = modelHandler.get_state();
        let stateLen = modelHandler.state_len();
        const getStateElement = (i: number) => {
            if (i < 0 || i >= stateLen) {
                throw new Error(
                    `Index out of bounds!... got ${i} when state's length is ${stateLen}`,
                );
            }
            const stateData = new Float64Array(memory.buffer, state, stateLen);
            return Math.round(stateData[i]*10)/10;
        };

        let temps: any[] = [];
        let tempList = document.getElementById("temps")!;
        ColdModel.spaces.forEach((s, i) => {
            let index = modelHandler.get_space_temperature_index(i);
            let name = s.name;
            let temperature = getStateElement(index);

            let li = document.createElement("li");
            li.innerHTML = `<span>${name}</span>:`;
            let span = document.createElement("span");
            li.appendChild(span);
            tempList.appendChild(li);

            temps.push({
                index,
                span,
            });
        });

        const renderLoop = () => {
            modelHandler.march(setTemp.value);
            temps.forEach((v) => {
                let { index, span } = v;

                let t = getStateElement(index);
                span.innerText = t
            });


            requestAnimationFrame(renderLoop);
        };
        renderLoop();
    </script>
</MainLayout>
